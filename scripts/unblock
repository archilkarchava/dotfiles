#!/bin/bash

host='keenetic'
output='/dev/stdout'
erroutput='/dev/stderr'
erase='false'
ifname='OpenVPN0'

function usage() { 
  printf '%s\n' "usage: $(basename "$0") [-qe] [-h ssh_host] [-p ssh_port] [-i interface_name] unblock_host" 1>&2
  exit 1;
}

while getopts ':h:p:i:qe' opt; do
  case "${opt}" in
    h ) 
      host="${OPTARG}"
      ;;
    p ) 
      port="${OPTARG}"
      ;;
    i )
      ifname="${OPTARG}"
      ;;
    q )  
      output='/dev/null'
      erroutput='/dev/null'
      ;;
    e ) erase='true'
      ;;
    * ) usage
      ;;
  esac
done
shift "$((OPTIND -1))"

for arg in "$@"; do
  arg="$(printf '%s' "${arg}" | sed -e 's|^[^/]*//||' -e 's|/.*$||')"
  if [[ "${arg}" =~ ^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
    ips+=( "${arg}" )
  else
    domains+=( "${arg}" )
  fi
done

readarray -t resolved < <( dig -4 +short "${domains[@]}" | uniq )

if [[ "${#resolved[@]}" -eq 0 ]]; then
  printf '%s\n' "Couldn't resolve ips." 1>&2 
  exit 1
fi

# Filter out ipv6
for ip in "${resolved[@]}"; do
  if [[ "${ip}" =~ ^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
    ips+=( "${ip}" )
  fi
done

for ip in "${ips[@]}"; do
  if [[ "${erase}" == 'true' ]]; then
    commands+=( "ndmq -p 'no ip route ${ip}'" )
  else
    commands+=( "ndmq -p 'ip route ${ip} ${ifname}'" )
  fi
done

function join() {
  local d="$1"
  shift
  printf '%s' "$1"
  shift
  printf '%s' "${@/#/$d}"
}

remote_command="$(join ' && ' "${commands[@]}")"

ssh "${host}" ${port:+"-p ${port}"} "${remote_command}" > "${output}" 2> "${erroutput}" && \
printf '%s\n' "${ips[@]}" > "${output}"
